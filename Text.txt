- https://docs.google.com/document/d/1mBGvH4NLxDr3NU64JxmXCiJz1bFZSDZ_NpDiqk08oso/edit?usp=sharing
- https://www.interviewsolutionshub.com/blog/how-to-use-ckeditor-laravel
- https://drive.google.com/drive/folders/1X0VvDKIMlQFjwTsc0hAynlXb7FG5fE6T

Screen
- https://fakeupdate.net/
- https://geekprank.com/hacker/


material-dashboard-laravel
- https://github.com/creativetimofficial/material-dashboard-laravel

argon-dashboard-laravel
- https://github.com/creativetimofficial/argon-dashboard-laravel

materio-bootstrap-html-laravel-admin-template-free
- https://github.com/themeselection/materio-bootstrap-html-laravel-admin-template-free

~~~~~ UNDER REVIEW ~~~~~
=> https://www.youtube.com/watch?v=9D7BxfgeDo8
=> https://www.youtube.com/watch?v=nwnp3L4Oy-Q
=> https://www.youtube.com/watch?v=4z6pLjkQMhA&t=675s



===== JAVASCRIPT =====
https://codepen.io/chriscoyier/pen/NWMQQoL




Steps:
1. Creating a laravel project: 
	composer create-project laravel/laravel laravel-blog
	composer create-project laravel/laravel:^10.0 example-app

2. Running the app:
	php artisan serve

3. Generating the authentication scaffolding:
	a. install Laravel's laravel/ui package: 
		composer require laravel/ui

	b. then build the authentication scaffolding:
		php artisan ui bootstrap --auth

	c. compile the fresh scaffolding:
		npm install && npm run dev

4. Creating the Post model:
	php artisan make:model Post -mc
		*m - migration
		*c - controller

5. Add the database credentials correctly set in the .env file
	DB_CONNECTION=mysql
	DB_HOST=127.0.0.1
	DB_PORT=3306
	DB_DATABASE=laravel_blog
	DB_USERNAME=root
	DB_PASSWORD=

6. Run migrations to create the tables in the database
	php artisan migrate





STEPS FOR SWEETALERT2 FOR LARAVEL

1. Install the Package
    - composer require realrashid/sweet-alert

2. Configure the Package
Add the service provider to your config/app.php file:
'providers' => [
    RealRashid\SweetAlert\SweetAlertServiceProvider::class,
],

'aliases' => [
    'Alert' => RealRashid\SweetAlert\Facades\Alert::class,
],

3. Publish Configuration (Optional)
    - php artisan vendor:publish --provider="RealRashid\SweetAlert\SweetAlertServiceProvider"
This command will create a sweetalert.php file in the config directory.

4. Using SweetAlert
- Example in a Controller:
use RealRashid\SweetAlert\Facades\Alert;

public function store(Request $request)
{
    // Your code logic

    Alert::success('Success Title', 'Success Message');
    
    return redirect()->back();
}

- Example in a Blade View:
<!DOCTYPE html>
<html>
<head>
    <!-- Other head content -->
</head>
<body>
    @include('sweetalert::alert')
    <!-- Other body content -->
</body>
</html>

5. Costumise sweetalert2

- Example in a Controller:
session()->flash('alert.toast', [
    'icon' => 'success',
    'title' => 'Area has been successfully added.'
]);

- Example in a Blade View:
<!DOCTYPE html>
<html>
<head>
    <!-- Other head content -->
</head>
<body>
    @include('sweetalert::alert')
    <!-- Other body content -->
</body>
</html>

Go to views/vendor/sweetalert/alert.blade.php
replace this in line 1
    - @if (config('sweetalert.alwaysLoadJS') === true || Session::has('alert.config') || Session::has('alert.delete') || Session::has('alert.toast'))



